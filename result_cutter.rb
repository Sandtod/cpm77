# Общая логика нарезки: открываем исходный файл со строками, находим в каждой строке логин, создаём для него файл с заголовками, записываем в каждый файл соответствующую строку
#encoding: utf-8

require "fileutils"
n = Dir.entries(".").select {|f| !File.directory? f}		# Читаем содержимое текущей папки

puts "Режем результаты на мелкие кусочки по логинам СтатГрад"
puts "Введите код работы из имени файла. Подсказка:"
n.map{|m| puts m if m[-1].chomp == "v"}						# Показываем все csv из папки
num = gets.chomp.to_s

folder = "#{num}_results"
FileUtils::mkdir_p folder

file = File.open("#{num}.csv")			# Открываем файл со списком строк

#file = File.open(ARGV[0])									# Второй вариант открытия файла - указываем путь прямо в командной строке после имени скрипта
#puts "Working now with #{ARGV[0]}"

all = []													# Надо заранее создать место в оперативной памяти, где будут храниться все строки
all_logins = []												# И отдельно - место, где будут храниться только логины
#headers = "Фамилия;Имя;Отчество;Пол;Дата рождения;Логин школы в системе Статград;Класс;Класс написания;Логин участника;Пакет;МПО;Название МПО".encode("windows-1251")			# Тоже заранее - строку с заголовком в кодировке для Экселя

counter = 0
file.each do |line|											# Начинаем процесс наполнения хранилок строками и логинами

counter = counter + 1
puts counter
login = line.match(/sch\d*/).to_s							# В каждой строке находим логин регулярным выражением (между косыми) - sch и цифры после него
line = line.force_encoding('utf-8').encode('windows-1251', invalid: :replace, undef: :replace)	# Нам нужно, чтоб скрипт обрабатывал исходный файл в utf-8, но генерил понятные экселю файлы в вин-кодировке

all.push(line)												# Все строки складываем в хранилку строк all
all_logins.push(login)										# Все логины, совпадающие с регулярным выражением, складываем в хранилку логинов all_logins

end															# Процессы необходимо заканчивать!

headers = all[0]											# Первая строка исходного файла - это заголовки для всех финальных файлов
all_logins = all_logins.uniq!								# Так как строк с одинаковыми логинами много, то в хранилке много дублей. Оставляем только уникальные!

all_logins.each do |filename|								# Берём все логины из хранилки логинов

File.open("#{folder}/#{filename}.csv", 'w') { |f| f.puts headers}		# Для каждого создаём файл с названием "логин.csv" и сразу пишем в него заголовок

end															# Процессы необходимо заканчивать!

all.each do |fill|											# Берём все строки из хранилки строк

login = fill.match(/sch\d*/).to_s							# Опять находим в каждой строке логин
File.open("#{folder}/#{login}.csv", 'a') { |w| w.puts fill}			# Открываем файл, который называется так же, как найденный логин, и пишем строку в него

end															# Процессы необходимо заканчивать!
